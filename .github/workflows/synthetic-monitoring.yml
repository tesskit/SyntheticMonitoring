name: Synthetic Monitoring

on:
  schedule:
    # Run every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch:  # Allow manual triggering
  push:
    branches: [ main, master ]
    paths:
      - '.github/workflows/synthetic-monitoring.yml'

permissions:
  contents: read
  issues: write

jobs:
  monitor-google:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up monitoring environment
      run: |
        echo "Starting synthetic monitoring at $(date)"
        sudo apt-get update
        sudo apt-get install -y curl wget jq bc dnsutils openssl

    - name: Basic Connectivity Test
      id: basic-test
      run: |
        echo "Testing ping to google.com..."
        if ping -c 3 google.com &>/dev/null; then
          echo "ping_status=success" >> $GITHUB_OUTPUT
        else
          echo "ping_status=failure" >> $GITHUB_OUTPUT
        fi

    - name: HTTP Response Test
      id: http-test
      run: |
        echo "Testing HTTP response from https://www.google.com..."
        start_time=$(date +%s%N)
        http_code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 https://www.google.com)
        end_time=$(date +%s%N)
        response_time=$(( (end_time - start_time) / 1000000 ))
        echo "http_code=$http_code" >> $GITHUB_OUTPUT
        echo "response_time=$response_time" >> $GITHUB_OUTPUT
        if [ "$http_code" -eq 200 ] && [ "$response_time" -lt 5000 ]; then
          echo "http_status=success" >> $GITHUB_OUTPUT
        else
          echo "http_status=failure" >> $GITHUB_OUTPUT
        fi

    - name: DNS Resolution Test
      id: dns-test
      run: |
        if nslookup google.com &>/dev/null; then
          echo "dns_status=success" >> $GITHUB_OUTPUT
        else
          echo "dns_status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Advanced Monitoring Script
      id: advanced-test
      run: |
        cat > monitor.sh << 'EOF'
        #!/bin/bash
        TARGET="google.com"
        TIMEOUT=10

        echo "=== Advanced Synthetic Monitoring Report ==="
        echo "Target: $TARGET"
        echo "Timestamp: $(date)"
        echo ""

        endpoints=("https://www.google.com" "https://google.com/search?q=test")
        for endpoint in "${endpoints[@]}"; do
          result=$(curl -s -w "time:%{time_total},code:%{http_code}" --max-time $TIMEOUT "$endpoint" -o /dev/null)
          time=$(echo $result | grep -o 'time:[0-9.]*' | cut -d: -f2)
          code=$(echo $result | grep -o 'code:[0-9]*' | cut -d: -f2)
          time_ms=$(echo "$time * 1000" | bc 2>/dev/null || echo "0")
          echo "Endpoint: $endpoint"
          echo "  Status: $code"
          echo "  Response Time: ${time_ms}ms"
          if [ "$code" = "200" ] && (( $(echo "$time < 5.0" | bc -l 2>/dev/null || echo "1") )); then
            echo "  Result: ✅ PASS"
          else
            echo "  Result: ❌ FAIL"
          fi
          echo ""
        done

        # SSL Certificate
        ssl_expiry=$(echo | openssl s_client -connect www.google.com:443 2>/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d= -f2)
        if [ -n "$ssl_expiry" ]; then
          echo "SSL Certificate valid until: $ssl_expiry"
        else
          echo "SSL Certificate check failed"
        fi

        # IPv6 connectivity
        if ping -6 -c 2 google.com &>/dev/null; then
          echo "IPv6 connectivity: ✅"
        else
          echo "IPv6 connectivity: ⚠️"
        fi
        EOF

        chmod +x monitor.sh
        ./monitor.sh | tee advanced-report.txt
        echo "advanced_status=completed" >> $GITHUB_OUTPUT

    - name: Generate Markdown Report
      id: report
      run: |
        {
          echo "# Synthetic Monitoring Report"
          echo "Timestamp: $(date)"
          echo ""
          echo "## Basic Tests"
          echo "- Ping: ${{ steps.basic-test.outputs.ping_status }}"
          echo "- HTTP: ${{ steps.http-test.outputs.http_status }} (Code: ${{ steps.http-test.outputs.http_code }}, Response: ${{ steps.http-test.outputs.response_time }}ms)"
          echo "- DNS: ${{ steps.dns-test.outputs.dns_status }}"
          echo ""
          echo "## Advanced Monitoring"
          cat advanced-report.txt
        } > monitoring-report.md
        echo "report_generated=true" >> $GITHUB_OUTPUT

    - name: Upload Report Artifact
      uses: actions/upload-artifact@v4
      with:
        name: monitoring-report-${{ github.run_id }}
        path: monitoring-report.md

    - name: Create GitHub Issue on Failure
      if: failure() || steps.http-test.outputs.http_status == 'failure' || steps.basic-test.outputs.ping_status == 'failure' || steps.dns-test.outputs.dns_status == 'failure'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Creating issue for monitoring failure..."
        TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
        printf "Monitoring failure detected at %s\n\nBasic tests:\n- Ping: %s\n- HTTP: %s\n- DNS: %s\n\nSee report: https://github.com/%s/actions/runs/%s" \
          "$TIMESTAMP" \
          "${{ steps.basic-test.outputs.ping_status }}" \
          "${{ steps.http-test.outputs.http_status }} (Code: ${{ steps.http-test.outputs.http_code }})" \
          "${{ steps.dns-test.outputs.dns_status }}" \
          "${{ github.repository }}" \
          "${{ github.run_id }}" \
          > issue_body.md
        gh issue create --title "🚨 Synthetic Monitoring Alert - $TIMESTAMP" --body-file issue_body.md

    - name: Send Email Alert
      if: always()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.sendgrid.net
        server_port: 587
        username: apikey
        password: ${{ secrets.SENDGRID_API_KEY }}
        subject: "Synthetic Monitoring Report - Google.com"
        to: ${{ secrets.SENDGRID_TO }}
        from: ${{ secrets.SENDGRID_FROM }}
        html_body: |
          <h2>Monitoring Report - $(date)</h2>
          <pre>$(cat monitoring-report.md)</pre>
