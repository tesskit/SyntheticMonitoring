# Synthetic Monitoring - Google.com Health Check
# Runs every 5 minutes to monitor https://www.google.com
#
# üìä WHERE TO SEE RESULTS & LOGS:
# ===============================
#
# 1. GITHUB ACTIONS DASHBOARD:
#    Your Repository ‚Üí Actions Tab ‚Üí "Synthetic Monitoring" workflow
#    - Real-time workflow status (running, success, failure)
#    - Detailed execution logs with timestamps
#    - Expand steps to see detailed output
#
# 2. WORKFLOW RUN DETAILS:
#    - Click any workflow run to see full logs
#    - View response times and HTTP status codes
#    - See success/failure indicators with emojis
#
# 3. ARTIFACTS (Detailed Reports):
#    - Download "monitoring-report-XXXXX.zip"
#    - Contains full markdown report with all metrics
#    - Includes test results, timestamps, and environment info
#
# 4. GITHUB ISSUES (Failures Only):
#    - Automatic issue creation when monitoring fails
#    - Includes detailed failure information
#    - Labeled for easy tracking
#
# üîç WHAT TO LOOK FOR IN LOGS:
# =============================
# ‚úÖ SUCCESS Example:
#   - HTTP Status: 200
#   - Response Time: 245ms
#   - All tests: success
#
# ‚ùå FAILURE Example:
#   - HTTP Status: 500
#   - Response Time: 1250ms
#   - Detailed error information
#
# üìã MONITORING SCHEDULE:
# ======================
# - Runs: Every 5 minutes (*/5 * * * *)
# - Manual trigger: Available via GitHub Actions UI
# - On code changes: Triggers when workflow file changes
#
# üö® FAILURE ALERTS:
# =================
# - GitHub Issues: Created automatically on failures
# - Console logs: Detailed error information
# - Artifact reports: Full monitoring report for download

name: Synthetic Monitoring

on:
  schedule:
    # Run every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch:  # Allow manual triggering
  push:
    branches: [ main, master ]
    paths:
      - '.github/workflows/synthetic-monitoring.yml'

jobs:
  monitor-google:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up monitoring environment
      run: |
        echo "Starting synthetic monitoring at $(date)"
        # Install any additional tools if needed
        sudo apt-get update
        sudo apt-get install -y curl wget jq
    
    - name: Run basic connectivity test
      id: basic-test
      run: |
        echo "Testing basic connectivity to google.com..."
        
        # Test basic ping
        if ping -c 3 google.com &>/dev/null; then
          echo "‚úÖ Ping test passed"
          echo "ping_status=success" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Ping test failed"
          echo "ping_status=failure" >> $GITHUB_OUTPUT
        fi
    
    - name: HTTP Response Test
      id: http-test
      run: |
        echo "Testing HTTP response from https://www.google.com..."
        
        # Measure response time and check status
        start_time=$(date +%s%N)
        http_code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 https://www.google.com)
        end_time=$(date +%s%N)
        
        # Calculate response time in milliseconds
        response_time=$(( (end_time - start_time) / 1000000 ))
        
        echo "HTTP Status Code: $http_code"
        echo "Response Time: ${response_time}ms"
        
        # Output results for other steps
        echo "http_code=$http_code" >> $GITHUB_OUTPUT
        echo "response_time=$response_time" >> $GITHUB_OUTPUT
        
        # Check if response is successful
        if [ "$http_code" -eq 200 ] && [ "$response_time" -lt 5000 ]; then
          echo "‚úÖ HTTP test passed"
          echo "http_status=success" >> $GITHUB_OUTPUT
        else
          echo "‚ùå HTTP test failed"
          echo "http_status=failure" >> $GITHUB_OUTPUT
        fi
    
    - name: DNS Resolution Test
      id: dns-test
      run: |
        echo "Testing DNS resolution..."
        
        # Test DNS resolution
        if nslookup google.com &>/dev/null; then
          echo "‚úÖ DNS resolution successful"
          echo "dns_status=success" >> $GITHUB_OUTPUT
        else
          echo "‚ùå DNS resolution failed"
          echo "dns_status=failure" >> $GITHUB_OUTPUT
        fi
    
    - name: Advanced Monitoring Script
      id: advanced-test
      run: |
        echo "Running advanced monitoring checks..."
        
        # Create a simple monitoring script
        cat > monitor.sh << 'EOF'
        #!/bin/bash
        
        TARGET="google.com"
        TIMEOUT=10
        
        echo "=== Advanced Synthetic Monitoring Report ==="
        echo "Target: $TARGET"
        echo "Timestamp: $(date)"
        echo ""
        
        # Test multiple endpoints
        endpoints=("https://www.google.com" "https://google.com/search?q=test")
        
        for endpoint in "${endpoints[@]}"; do
          echo "Testing: $endpoint"
          
          # Get HTTP status and response time
          result=$(curl -s -w "time:%{time_total},code:%{http_code}" --max-time $TIMEOUT "$endpoint" -o /dev/null)
          
          time=$(echo $result | grep -o 'time:[0-9.]*' | cut -d: -f2)
          code=$(echo $result | grep -o 'code:[0-9]*' | cut -d: -f2)
          
          # Convert time to milliseconds
          time_ms=$(echo "$time * 1000" | bc 2>/dev/null || echo "0")
          
          echo "  Status: $code"
          echo "  Response Time: ${time_ms}ms"
          
          if [ "$code" = "200" ] && (( $(echo "$time < 5.0" | bc -l 2>/dev/null || echo "1") )); then
            echo "  Result: ‚úÖ PASS"
          else
            echo "  Result: ‚ùå FAIL"
          fi
          echo ""
        done
        
        # Check SSL certificate
        echo "SSL Certificate Check:"
        ssl_expiry=$(echo | openssl s_client -connect www.google.com:443 2>/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d= -f2)
        if [ -n "$ssl_expiry" ]; then
          echo "  Certificate valid until: $ssl_expiry"
          
          # Check if certificate expires within 30 days
          expiry_timestamp=$(date -d "$ssl_expiry" +%s)
          warning_timestamp=$(date -d "+30 days" +%s)
          
          if [ "$expiry_timestamp" -lt "$warning_timestamp" ]; then
            echo "  ‚ö†Ô∏è  Certificate expires soon!"
          else
            echo "  ‚úÖ Certificate is valid"
          fi
        else
          echo "  ‚ùå Could not check certificate"
        fi
        echo ""
        
        # Test IPv6 connectivity (if available)
        echo "IPv6 Connectivity Test:"
        if ping -6 -c 2 google.com &>/dev/null; then
          echo "  ‚úÖ IPv6 connectivity available"
        else
          echo "  ‚ö†Ô∏è  IPv6 connectivity not available"
        fi
        
        echo "=== End Report ==="
        EOF
        
        chmod +x monitor.sh
        ./monitor.sh
        
        echo "advanced_status=completed" >> $GITHUB_OUTPUT
    
    - name: Generate Report
      id: report
      run: |
        echo "Generating monitoring report..."
        
        # Create a summary report
        {
          echo "# Synthetic Monitoring Report"
          echo ""
          echo "## Summary"
          echo "- **Target:** https://www.google.com"
          echo "- **Timestamp:** $(date)"
          echo "- **Run ID:** $GITHUB_RUN_ID"
          echo ""
          echo "## Test Results"
          echo "| Test | Status | Details |"
          echo "|------|--------|---------|"
          
          # Basic connectivity
          if [ "${{ steps.basic-test.outputs.ping_status }}" = "success" ]; then
            echo "| Ping Test | ‚úÖ Pass | Basic connectivity OK |"
          else
            echo "| Ping Test | ‚ùå Fail | Ping failed |"
          fi
          
          # HTTP test
          if [ "${{ steps.http-test.outputs.http_status }}" = "success" ]; then
            echo "| HTTP Test | ‚úÖ Pass | Status: ${{ steps.http-test.outputs.http_code }}, Response: ${{ steps.http-test.outputs.response_time }}ms |"
          else
            echo "| HTTP Test | ‚ùå Fail | Status: ${{ steps.http-test.outputs.http_code }}, Response: ${{ steps.http-test.outputs.response_time }}ms |"
          fi
          
          # DNS test
          if [ "${{ steps.dns-test.outputs.dns_status }}" = "success" ]; then
            echo "| DNS Test | ‚úÖ Pass | DNS resolution OK |"
          else
            echo "| DNS Test | ‚ùå Fail | DNS resolution failed |"
          fi
          
          echo ""
          echo "## Environment"
          echo "- **Runner:** ubuntu-latest"
          echo "- **Region:** GitHub Actions"
          echo ""
          echo "---"
          echo "*This report was generated automatically by GitHub Actions synthetic monitoring.*"
        } > monitoring-report.md
        
        echo "report_generated=true" >> $GITHUB_OUTPUT
    
    - name: Upload monitoring results
      uses: actions/upload-artifact@v4
      with:
        name: monitoring-report-${{ github.run_id }}
        path: monitoring-report.md
    
    - name: Check for failures and create GitHub Issue
      if: failure()
      run: |
        echo "‚ö†Ô∏è  Monitoring detected failures!"
        echo "Check the uploaded artifacts for detailed report."
        
        # Create a GitHub issue on failure
        if [ "${{ steps.http-test.outputs.http_status }}" = "failure" ] || [ "${{ steps.basic-test.outputs.ping_status }}" = "failure" ] || [ "${{ steps.dns-test.outputs.dns_status }}" = "failure" ]; then
          gh issue create --title "üö® Synthetic Monitoring Alert - $(date)" \
            --body "Monitoring detected issues with google.com at $(date)

## Failure Details:
- **HTTP Status:** ${{ steps.http-test.outputs.http_code }}
- **Response Time:** ${{ steps.http-test.outputs.response_time }}ms
- **Ping Status:** ${{ steps.basic-test.outputs.ping_status }}
- **DNS Status:** ${{ steps.dns-test.outputs.dns_status }}

## Action Required:
Check the monitoring artifacts for the detailed report.

*This issue was created automatically by GitHub Actions synthetic monitoring.*" \
            --label "monitoring,alert,urgent"
        fi
    
    - name: Success notification with summary
      if: success()
      run: |
        echo "‚úÖ All monitoring checks completed successfully!"
        echo "üìä Results Summary:"
        echo "  - HTTP Status: ${{ steps.http-test.outputs.http_code }}"
        echo "  - Response Time: ${{ steps.http-test.outputs.response_time }}ms"
        echo "  - Ping: ${{ steps.basic-test.outputs.ping_status }}"
        echo "  - DNS: ${{ steps.dns-test.outputs.dns_status }}"
        echo ""
        echo "üìã Full report available in artifacts."